# -*- coding: utf-8 -*-
"""decision tree algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VhrpmiQb5gZqiyGQZ-yX8Roer3Xilz6h
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

"""Reading Iris Data



"""

df=pd.read_csv(r"Iris.csv")

#Displaying data
df.head()

#Checking size of full data
df.info()

df.describe()

df.isnull().sum()

df.columns

#Check unique values
df.nunique()

"""Drop the value of Id from dataset"""

df.drop('Id',axis=1, inplace=True)

df.head()

df.mean()

df.max()

"""Visualizing the data"""

a=sns.pairplot(df, hue='Species', markers='+')
plt.show()

df.head()

a=sns.violinplot(y='Species', x='SepalLengthCm', data=df, inner='quartile')
plt.show()
a=sns.violinplot(y='Species', x='SepalWidthCm', data=df, inner='quartile')
plt.show()
a=sns.violinplot(y='Species', x='PetalLengthCm', data=df, inner='quartile')
plt.show()
a=sns.violinplot(y='Species', x='PetalWidthCm', data=df, inner='quartile')
plt.show()

"""Now let us build a classifier which can predict survival creating train and test data sets using accent y variables"""

# list of variables to map

varlist=['Species']

#Defining the map function
def binary_map(X):
  return X.map({'Iris-setosa':0, 'Iris-virginica':1, 'Iris-versicolor':2})

#Applying the function to housing list
df[varlist]  = df[varlist].apply(binary_map)

from sklearn.model_selection import train_test_split

used_features=["SepalLengthCm", "SepalWidthCm", "PetalLengthCm", "PetalWidthCm", "Species"]

x=df[used_features].values
y = df["Species"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)

print(x_train)
print(x_test)
print(y_train)
print(y_test)

df.head()

df.tail()

"""Creating the model"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x, y, test_size=0.3, random_state=0)

"""Building a decision tree calssifier and also a confusion matrix"""

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

from sklearn.tree import DecisionTreeClassifier

#Fitting the decision tree with hyperparameters,apart from
#max_depthn which is 5 so we can plot and read the tree

dt_default = DecisionTreeClassifier(max_depth=15)

#Fitting on train data
dt_default.fit(x_train,y_train)

#Lets check the evaluation metrics of our default model

#Importing classification report and confusion matrix from sklearn metrics

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn import tree

#Making predictions
y_pred_default = dt_default.predict(x_test)

#printing classification report
print(classification_report(y_test,y_pred_default))

print(confusion_matrix(y_test,y_pred_default))
print(accuracy_score(y_test,y_pred_default))